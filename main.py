import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8253356529:AAG5sClokG30SlhqpP3TNMdl6TajExIE7YU"
ADMIN_GROUP_ID = -1002593269045  # —Ç–≤–æ—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–∞
TRIAL_DAYS = 7
SUB_PRICE = "99‚ÇΩ / –º–µ—Å—è—Ü"
PAY_DETAILS = "üí≥ 89322229930\nüè¶ Ozon –ë–∞–Ω–∫\nüí∞ 99‚ÇΩ/–º–µ—Å"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}  # user_id: {trial_end, sub_end, referred_by, referrals, active}

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)


# === –ö–ù–û–ü–ö–ò ===
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚öôÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="activate"))
    return kb


def pay_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="pay_info"))
    return kb


def paid_button(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{user_id}"))
    return kb


# === –°–¢–ê–†–¢ ===
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    if user_id not in users:
        users[user_id] = {
            "trial_end": datetime.now() + timedelta(days=TRIAL_DAYS),
            "sub_end": None,
            "referred_by": None,
            "referrals": [],
            "active": True
        }

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{username}</b>!\n\n"
        "‚ú® –Ø ‚Äî <b>Chat Save Bot</b>.\n"
        "–Ø —É–º–µ—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å üóëÔ∏è —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ ‚è≥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö –∏ –¥–∏–∞–ª–æ–≥–∞—Ö!\n\n"
        f"üî• –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: <b>{TRIAL_DAYS} –¥–Ω–µ–π</b>.\n\n"
        "–ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª ‚Äî –Ω–∞–∂–º–∏ –Ω–∏–∂–µ üëá"
    )
    await message.answer(text, reply_markup=main_menu())


# === –ê–ö–¢–ò–í–ê–¶–ò–Ø ===
@dp.callback_query_handler(lambda c: c.data == "activate")
async def activate_bot(call: types.CallbackQuery):
    text = (
        "‚ö° –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö:\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –≤ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n"
        "4Ô∏è‚É£ –î–æ–±–∞–≤—å –º–µ–Ω—è: <b>@Chat_ls_save_bot</b>\n\n"
        "‚úÖ –í—Å—ë! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üî•"
    )
    await call.message.edit_text(text)


# === –ü–û–ö–ê–ó–ê–¢–¨ –†–ï–ö–í–ò–ó–ò–¢–´ ===
@dp.callback_query_handler(lambda c: c.data == "pay_info")
async def show_payment(call: types.CallbackQuery):
    user_id = call.from_user.id
    text = (
        "üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n\n"
        f"{PAY_DETAILS}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è"
    )
    await call.message.edit_text(text, reply_markup=paid_button(user_id))


# === –ö–ù–û–ü–ö–ê "–û–ü–õ–ê–¢–ò–õ(–ê)" ===
@dp.callback_query_handler(lambda c: c.data.startswith("paid_"))
async def paid_request(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    username = call.from_user.username or call.from_user.full_name

    await bot.send_message(
        ADMIN_GROUP_ID,
        f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –Ω–∞–∂–∞–ª '–û–ø–ª–∞—Ç–∏–ª(–∞)'.\n"
        f"–°—É–º–º–∞: {SUB_PRICE}\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}")
        )
    )
    await call.message.edit_text("‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...")


# === –ê–î–ú–ò–ù –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ ===
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_payment(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    if user_id in users:
        users[user_id]["sub_end"] = datetime.now() + timedelta(days=30)
        users[user_id]["active"] = True

    await bot.send_message(user_id, "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â—ë –Ω–∞ 30 –¥–Ω–µ–π üî•")
    await call.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ID {user_id}")


# === –ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ê ===
async def check_subscriptions():
    while True:
        now = datetime.now()
        for user_id, data in list(users.items()):
            # –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if data["trial_end"] and now > data["trial_end"] and not data["sub_end"]:
                await bot.send_message(
                    user_id,
                    "‚è≥ –¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üî•",
                    reply_markup=pay_menu()
                )
                users[user_id]["trial_end"] = None

            # –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É
            if data["sub_end"]:
                days_left = (data["sub_end"] - now).days
                if days_left in [3, 2, 1]:
                    await bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>{days_left} –¥–Ω.</b>!\n"
                        "–ü—Ä–æ–¥–ª–∏ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø üî•",
                        reply_markup=pay_menu()
                    )

                if now > data["sub_end"]:
                    users[user_id]["active"] = False
                    await bot.send_message(
                        user_id,
                        "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n–ü—Ä–æ–¥–ª–∏ –µ—ë, —á—Ç–æ–±—ã —è —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–ª üôå",
                        reply_markup=pay_menu()
                    )
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å


# === –°–¢–ê–†–¢ –ü–û–õ–õ–ò–ù–ì–ê ===
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(check_subscriptions())
    executor.start_polling(dp, skip_updates=True)

import os, json, datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN, ADMIN_ID, TARIFFS, BANK_REQUISITES, FREE_DAYS, DATA_PATH, USERS_FILE

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
os.makedirs(DATA_PATH, exist_ok=True)
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

def load_users():
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def is_active(user_id):
    users = load_users()
    if str(user_id) not in users:
        return False
    start = datetime.datetime.fromisoformat(users[str(user_id)]["free_start"])
    return (datetime.datetime.now() - start).days < FREE_DAYS or users[str(user_id)].get("paid", False)

def activate_free(user_id):
    users = load_users()
    users[str(user_id)] = {"free_start": datetime.datetime.now().isoformat(), "paid": False}
    save_users(users)

def activate_paid(user_id):
    users = load_users()
    users[str(user_id)] = {"free_start": datetime.datetime.now().isoformat(), "paid": True}
    save_users(users)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])
async def welcome(message: types.Message):
    text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatSaveBot! üåü\n\n"
        "–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –∏—Å—á–µ–∑–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 7 –¥–Ω–µ–π!\n"
        "‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:"
    )
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="activate_free")
    )
    await message.answer(text, reply_markup=kb)

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == "activate_free")
async def free_period(call: types.CallbackQuery):
    user_id = call.from_user.id
    activate_free(user_id)
    await call.answer("üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    text = (
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ Telegram Business.\n"
        "2Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω—É–∂–Ω—ã—Ö —á–∞—Ç–∞—Ö —á–µ—Ä–µ–∑ '–ß–∞—Ç-–±–æ—Ç—ã'.\n\n"
        "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –∏—Å—á–µ–∑–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        f"üí° –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è {FREE_DAYS} –¥–Ω–µ–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É."
    )
    await call.message.answer(text)
    await show_tariffs(call.message)

# –ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
async def show_tariffs(message):
    kb = InlineKeyboardMarkup()
    for key, price in TARIFFS.items():
        if key == "2_weeks": name = "2 –Ω–µ–¥–µ–ª–∏"
        elif key == "1_month": name = "1 –º–µ—Å—è—Ü"
        elif key == "2_months": name = "2 –º–µ—Å—è—Ü–∞"
        kb.add(InlineKeyboardButton(f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"tariff_{key}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
@dp.callback_query_handler(lambda c: c.data.startswith("tariff_"))
async def select_tariff(call: types.CallbackQuery):
    user_id = call.from_user.id
    tariff_key = call.data.split("_")[1]
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ.\n{BANK_REQUISITES}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∞
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}")
    )
    await bot.send_message(ADMIN_ID,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} ({user_id}) –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {tariff_key}.",
        reply_markup=kb
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_"))
async def confirm_payment(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    activate_paid(user_id)
    await call.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    await bot.send_message(user_id,
        "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –±–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω.\n"
        "üîπ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã."
    )
    await call.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
@dp.message_handler()
async def handle_messages(message: types.Message):
    if not is_active(message.from_user.id):
        return  # –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON/–ë–î
    # –ü—Ä–∏–º–µ—Ä:
    users = load_users()
    users[str(message.from_user.id)]["last_msg"] = message.text
    save_users(users)
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

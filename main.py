# main.py
import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient, events
import json
from config import API_ID, API_HASH, ADMIN_ID, DATA_PATH, FREE_DAYS, TARIFFS, BANK_REQUISITES

# TelegramClient –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (Business)
client = TelegramClient("session", API_ID, API_HASH)

# aiogram Bot –¥–ª—è –º–µ–Ω—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = Bot(token="8253356529:AAG5sClokG30SlhqpP3TNMdl6TajExIE7YU")
dp = Dispatcher(bot)

os.makedirs(DATA_PATH, exist_ok=True)
USER_DATA_FILE = os.path.join(DATA_PATH, "users.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}

def save_users():
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def save_deleted_message(chat_id, user_id, user_name, message):
    path = os.path.join(DATA_PATH, f"{chat_id}.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {user_name} ({user_id}): {message}\n")

def save_deleted_chat(chat_id, chat_title):
    path = os.path.join(DATA_PATH, "deleted_chats.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {chat_title} ({chat_id}) –±—ã–ª —É–¥–∞–ª—ë–Ω\n")

def main_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="activate_free"),
        InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
        InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referrals"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    return kb

def tariffs_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("14 –¥–Ω–µ–π ‚Äî 49‚ÇΩ", callback_data="tariff_14"),
        InlineKeyboardButton("30 –¥–Ω–µ–π ‚Äî 99‚ÇΩ", callback_data="tariff_30"),
        InlineKeyboardButton("60 –¥–Ω–µ–π ‚Äî 149‚ÇΩ", callback_data="tariff_60"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return kb

def referrals_menu(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(f"üîó –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞", url=f"https://t.me/Chat_ls_save_bot?start={user_id}")
    )
    kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

def format_stats(user_id):
    user = users.get(str(user_id), {})
    end_date = datetime.fromisoformat(user.get("end_date", datetime.now().isoformat()))
    days_left = (end_date - datetime.now()).days
    referrals = user.get("referrals", [])
    activated = sum(1 for r in referrals if users.get(str(r), {}).get("active"))
    return f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n" \
           f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n" \
           f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–µ—à–ª–æ: {len(referrals)}\n" \
           f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {activated}"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {"active": False, "end_date": (datetime.now() + timedelta(days=FREE_DAYS)).isoformat(), "referrals": []}
        save_users()
    text = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatSaveBot!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç:\n"
        "‚Ä¢ üìù –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ üì∏ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "‚Ä¢ ‚ùå –£–¥–∞–ª—ë–Ω–Ω—ã–µ —á–∞—Ç—ã\n\n"
        f"üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:* {FREE_DAYS} –¥–Ω–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await message.answer(text, reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query_handler(lambda c: True)
async def callbacks(call: types.CallbackQuery):
    data = call.data
    user_id = str(call.from_user.id)
    user = users.get(user_id, {})

    if data == "activate_free":
        users[user_id]["active"] = True
        users[user_id]["end_date"] = (datetime.now() + timedelta(days=FREE_DAYS)).isoformat()
        save_users()
        await call.message.answer(
            "‚úÖ *–í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!* üéâ\n\n"
            "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:*\n"
            "1Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∂–∏–º\n"
            "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ '–ß–∞—Ç-–±–æ—Ç—ã' –≤ Telegram Business\n"
            "3Ô∏è‚É£ –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞",
            parse_mode="Markdown"
        )

    elif data == "tariffs":
        await call.message.answer("üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*",
                                  reply_markup=tariffs_menu(), parse_mode="Markdown")

    elif data.startswith("tariff_"):
        t_name = data.replace("tariff_", "")
        price_map = {"14": 49, "30": 99, "60": 149}
        price = price_map[t_name]
        text = (
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ *{t_name} –¥–Ω–µ–π* –∑–∞ *{price}‚ÇΩ*\n\n"
            f"üè¶ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n{BANK_REQUISITES}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª(–∞)'"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{t_name}"))
        kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tariffs"))
        await call.message.answer(text, reply_markup=kb, parse_mode="Markdown")

    elif data.startswith("paid_"):
        t_name = data.replace("paid_", "")
        await bot.send_message(
            ADMIN_ID,
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{call.from_user.full_name}* ({user_id}) –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {t_name}\n–ù–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}_{t_name}")
            )
        )
        await call.message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="Markdown")

    elif data.startswith("confirm_"):
        parts = data.split("_")
        u_id, t_name = parts[1], parts[2]
        users[u_id]["active"] = True
        users[u_id]["end_date"] = (datetime.now() + timedelta(days=int(t_name))).isoformat()
        save_users()
        await bot.send_message(
            u_id,
            f"üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–∞—Ä–∏—Ñ: *{t_name} –¥–Ω–µ–π*\n\n"
            "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:*\n"
            "1Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∂–∏–º\n"
            "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ '–ß–∞—Ç-–±–æ—Ç—ã'\n"
            "3Ô∏è‚É£ –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –º–µ–¥–∏–∞",
            parse_mode="Markdown"
        )
        await call.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {u_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", parse_mode="Markdown")

    elif data == "referrals":
        await call.message.answer("üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*",
                                  reply_markup=referrals_menu(user_id), parse_mode="Markdown")

    elif data == "stats":
        await call.message.answer(format_stats(user_id), parse_mode="Markdown")

    elif data == "back_main":
        await call.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    await call.answer()

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.MessageDeleted)
async def deleted_messages(event):
    chat = await event.get_chat()
    for msg_id in event.deleted_ids:
        try:
            msg = await client.get_messages(chat, ids=msg_id)
            text = msg.text if msg else "<–º–µ–¥–∏–∞/–≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–µ>"
            sender = await msg.get_sender() if msg else None
            user_name = sender.first_name if sender else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            user_id = sender.id if sender else 0
        except:
            text = "<—É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>"
            user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            user_id = 0

        save_deleted_message(chat.id, user_id, user_name, text)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if str(user_id) in users and users[str(user_id)]["active"]:
            await bot.send_message(user_id, f"üìù –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat.title}:\n{text}")

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
@client.on(events.ChatAction)
async def deleted_chats(event):
    if event.user_left or event.user_kicked:
        chat = await event.get_chat()
        save_deleted_chat(chat.id, getattr(chat, "title", "–ß–∞—Ç"))
        for u_id, u_data in users.items():
            if u_data.get("active"):
                await bot.send_message(int(u_id), f"‚ùå –£–¥–∞–ª—ë–Ω —á–∞—Ç: {getattr(chat, 'title', '–ß–∞—Ç')} ({chat.id})")

async def start_aiogram():
    await dp.start_polling()

async def main():
    await asyncio.gather(client.start(), start_aiogram())

if __name__ == "__main__":
    asyncio.run(main())

# main.py
import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient, events
from config import API_ID, API_HASH, ADMIN_ID, DATA_PATH, FREE_DAYS, TARIFFS, BANK_REQUISITES

# TelegramClient –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (Business)
client = TelegramClient("session", API_ID, API_HASH)

# aiogram Bot –¥–ª—è –º–µ–Ω—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = Bot(token="8253356529:AAG5sClokG30SlhqpP3TNMdl6TajExIE7YU")
dp = Dispatcher(bot)

os.makedirs(DATA_PATH, exist_ok=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def save_deleted_message(chat_id, user_id, user_name, message):
    path = os.path.join(DATA_PATH, f"{chat_id}.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {user_name} ({user_id}): {message}\n")

def save_deleted_chat(chat_id, chat_title):
    path = os.path.join(DATA_PATH, f"deleted_chats.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {chat_title} ({chat_id}) –±—ã–ª —É–¥–∞–ª—ë–Ω\n")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="activate_free"),
        InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
        InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referrals")
    )
    return kb

# –ú–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
def tariffs_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("14 –¥–Ω–µ–π ‚Äî 49‚ÇΩ", callback_data="tariff_14"),
        InlineKeyboardButton("30 –¥–Ω–µ–π ‚Äî 99‚ÇΩ", callback_data="tariff_30"),
        InlineKeyboardButton("60 –¥–Ω–µ–π ‚Äî 149‚ÇΩ", callback_data="tariff_60"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return kb

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
def referrals_menu(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/Chat_ls_save_bot?start={user_id}", callback_data="ignore"))
    kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatSaveBot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç:\n"
        "‚Ä¢ –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "‚Ä¢ –£–¥–∞–ª—ë–Ω–Ω—ã–µ —á–∞—Ç—ã\n\n"
        f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {FREE_DAYS} –¥–Ω–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await message.answer(text, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def callbacks(call: types.CallbackQuery):
    data = call.data
    user = call.from_user

    if data == "activate_free":
        await call.message.answer(
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "1. –í–∫–ª—é—á–∏—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∂–∏–º\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ '–ß–∞—Ç-–±–æ—Ç—ã' –≤ Telegram Business\n"
            "3. –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        )

    elif data == "tariffs":
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_menu())

    elif data.startswith("tariff_"):
        tariff_name = data.replace("tariff_", "")
        price_map = {"14": 49, "30": 99, "60": 149}
        price = price_map[tariff_name]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_name} –¥–Ω–µ–π –∑–∞ {price}‚ÇΩ\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{BANK_REQUISITES}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª(–∞)'"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data=f"paid_{tariff_name}"))
        kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tariffs"))
        await call.message.answer(text, reply_markup=kb)

    elif data.startswith("paid_"):
        tariff_name = data.replace("paid_", "")
        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {tariff_name}\n–ù–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user.id}_{tariff_name}")
            )
        )
        await call.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    elif data.startswith("confirm_"):
        parts = data.split("_")
        user_id = int(parts[1])
        tariff_name = parts[2]
        await bot.send_message(
            user_id,
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Ç–∞—Ä–∏—Ñ: {tariff_name} –¥–Ω–µ–π\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
            "1. –í–∫–ª—é—á–∏—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∂–∏–º\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ '–ß–∞—Ç-–±–æ—Ç—ã'\n"
            "3. –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –º–µ–¥–∏–∞"
        )
        await call.message.answer(f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

    elif data == "referrals":
        await call.message.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", reply_markup=referrals_menu(user.id))

    elif data == "back_main":
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    await call.answer()

# Telethon: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.MessageDeleted)
async def deleted_messages(event):
    chat = await event.get_chat()
    for msg in event.deleted:
        sender = await msg.get_sender()
        text = msg.message or "<–º–µ–¥–∏–∞/–≥–æ–ª–æ—Å–æ–≤–æ–µ>"
        save_deleted_message(chat.id, sender.id, sender.first_name, text)
        await bot.send_message(ADMIN_ID, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat.title}:\n{text}")

# Telethon: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
@client.on(events.ChatAction)
async def deleted_chats(event):
    if event.user_left or event.user_kicked:
        chat = await event.get_chat()
        save_deleted_chat(chat.id, getattr(chat, "title", "–ß–∞—Ç"))
        await bot.send_message(ADMIN_ID, f"–£–¥–∞–ª—ë–Ω —á–∞—Ç: {getattr(chat, 'title', '–ß–∞—Ç')} ({chat.id})")

async def start_aiogram():
    await dp.start_polling()

async def main():
    await asyncio.gather(client.start(), start_aiogram())

if __name__ == "__main__":
    asyncio.run(main())

import json
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import TOKEN, ADMIN_ID, TARIFFS, BANK_REQUISITES, FREE_DAYS, DATA_PATH

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
if not os.path.exists(DATA_PATH):
    os.makedirs(DATA_PATH)

MESSAGES_FILE = os.path.join(DATA_PATH, "messages.json")
USERS_FILE = os.path.join(DATA_PATH, "users.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

messages_data = load_json(MESSAGES_FILE)
users_data = load_json(USERS_FILE)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ö° –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_7days"))
    kb.add(InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"))
    kb.add(InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"))
    return kb

# –ü–æ–¥–º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
def tariffs_menu():
    kb = InlineKeyboardMarkup()
    for name, price in TARIFFS.items():
        kb.add(InlineKeyboardButton(f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"buy_{name}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# –ü–æ–¥–º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def referrals_menu(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_TEXT = (
    "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ChatSaver ü§ñ\n\n"
    "–Ø —É–º–µ—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
    f"üíé –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {FREE_DAYS} –¥–Ω–µ–π\n"
    "üìå –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥!"
)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
INSTRUCTION_TEXT = (
    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
    "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
    "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'\n"
    "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ 'Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞'\n"
    "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ß–∞—Ç-–±–æ—Ç—ã'\n"
    "4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @Chat_ls_save_bot\n\n"
    "–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö —á–∞—Ç–∞—Ö."
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
def is_paid(user_id):
    user = users_data.get(str(user_id), {})
    return user.get("paid", False)

# –°–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def callbacks(call: types.CallbackQuery):
    user_id = call.from_user.id

    if call.data == "free_7days":
        users_data[str(user_id)] = {"paid": True, "free": True, "days_left": FREE_DAYS}
        save_json(USERS_FILE, users_data)
        await bot.send_message(user_id, INSTRUCTION_TEXT)
        await call.answer()

    elif call.data == "tariffs":
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_menu())
        await call.answer()

    elif call.data.startswith("buy_"):
        name = call.data.split("_")[1]
        price = TARIFFS.get(name, 0)
        text = f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {name} ‚Äî {price}‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {BANK_REQUISITES}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª(–∞)' –≤ –±–æ—Ç–µ."
        await bot.send_message(user_id, text)
        await call.answer()

    elif call.data == "referrals":
        await bot.send_message(user_id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/Chat_ls_save_bot?start={user_id}")
        await call.answer()

    elif call.data == "back_main":
        await bot.send_message(user_id, WELCOME_TEXT, reply_markup=main_menu())
        await call.answer()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    if not is_paid(user_id):
        return
    msg_id = str(message.message_id)
    messages_data[msg_id] = {
        "user": user_id,
        "chat": message.chat.id,
        "text": message.text,
        "type": message.content_type
    }
    save_json(MESSAGES_FILE, messages_data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    for user_id, data in users_data.items():
        if data.get("free", False):
            # –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å days_left –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —á–µ—Ä–µ–∑ scheduler
            pass
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())

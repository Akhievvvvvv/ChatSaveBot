import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import json, os

from config import TOKEN, ADMIN_ID, TARIFFS, BANK_REQUISITES, FREE_DAYS
from utils import load_users, save_users, add_message

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

users = load_users()

# ====== Helpers ======
def get_user_data(user_id):
    return users.get(str(user_id), {"sub_end": None, "referrals": [], "bonus_active": False})

def save_user_data(user_id, data):
    users[str(user_id)] = data
    save_users(users)

# ====== Inline menus ======
def menu_main():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid"),
        InlineKeyboardButton("üë• –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")
    )
    return kb

def menu_tariffs():
    kb = InlineKeyboardMarkup(row_width=1)
    for name, price in TARIFFS.items():
        kb.add(InlineKeyboardButton(f"{name.replace('_',' ')} ‚Äî {price}‚ÇΩ", callback_data=f"buy_{name}"))
    return kb

# ====== Handlers ======
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    data = get_user_data(user_id)
    # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –¥–∞—ë–º –±–æ–Ω—É—Å
    if data["sub_end"] is None:
        data["sub_end"] = (datetime.now() + timedelta(days=FREE_DAYS)).timestamp()
        save_user_data(user_id, data)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n–Ø —Å–æ—Ö—Ä–∞–Ω—é –≤—Å–µ –≤–∞—à–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –∏—Å—á–µ–∑–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=menu_main())

@dp.callback_query_handler(lambda c: c.data)
async def callbacks(call: types.CallbackQuery):
    user_id = call.from_user.id
    data = get_user_data(user_id)

    if call.data == "tariffs":
        await call.message.edit_text("–í–æ—Ç –Ω–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:", reply_markup=menu_tariffs())
    elif call.data.startswith("buy_"):
        tariff = call.data[4:]
        price = TARIFFS.get(tariff)
        await call.message.answer(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n{BANK_REQUISITES}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏–ª(–∞)¬ª")
    elif call.data == "paid":
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} ({user_id}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.")
        await call.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    elif call.data == "referral":
        ref_link = f"https://t.me/Chat_ls_save_bot?start={user_id}"
        await call.message.answer(f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n–ë–æ–Ω—É—Å +7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

# ====== Business messages ======
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_business(message: types.Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    chat_id = message.chat.id
    msg_data = {
        "message_id": message.message_id,
        "date": str(message.date),
        "type": message.content_type,
        "text": getattr(message, "text", None)
    }
    add_message(user_id, chat_id, msg_data)

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

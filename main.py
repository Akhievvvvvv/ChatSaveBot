import asyncio, json, random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN, ADMIN_ID, TARIFFS, BANK_REQUISITES
from utils import load_users, save_users, save_message

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

users = load_users()

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------

def get_referral_link(user_id):
    return f"https://t.me/Chat_ls_save_bot?start=ref{user_id}"

def user_active(user_id):
    return users.get(str(user_id), {}).get("active", False)

def add_referral(user_id, ref_id):
    user_data = users.get(str(user_id), {})
    if "referrals" not in user_data:
        user_data["referrals"] = []
    if ref_id not in user_data["referrals"]:
        user_data["referrals"].append(ref_id)
    users[str(user_id)] = user_data
    save_users(users)

# -------------------- –•—ç–Ω–¥–ª–µ—Ä—ã --------------------

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    users.setdefault(str(user_id), {"active": False, "referrals": []})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É
    if message.get_args().startswith("ref"):
        ref_id = message.get_args()[3:]
        if ref_id != str(user_id):
            add_referral(ref_id, user_id)
    
    if not user_active(user_id):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ üí≥", callback_data="tariffs"))
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–ë–æ—Ç ChatSave ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –∏—Å—á–µ–∑–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, üîí –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n\n"
            "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:",
            reply_markup=kb
        )
    else:
        await send_welcome(user_id)

async def send_welcome(user_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üîó", callback_data="myref"))
    kb.add(InlineKeyboardButton("–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üíæ", callback_data="mymessages"))
    await bot.send_message(user_id,
        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
        "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—á–µ–∑–∞—é—â–∏–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

# -------------------- Callback Query --------------------

@dp.callback_query_handler(lambda c: True)
async def callbacks(call: types.CallbackQuery):
    user_id = call.from_user.id
    data = call.data

    if data == "tariffs":
        kb = InlineKeyboardMarkup()
        for name, price in TARIFFS.items():
            kb.add(InlineKeyboardButton(f"{name} ‚Äî {price}‚ÇΩ", callback_data=f"pay_{name}"))
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

    elif data.startswith("pay_"):
        plan = data[4:]
        await bot.send_message(ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} ({user_id}) —Ö–æ—á–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ {plan}.\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {REKVIZITY}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{user_id}")
            )
        )
        await call.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ")

    elif data.startswith("confirm_") and user_id == ADMIN_ID:
        uid = int(data.split("_")[1])
        users.setdefault(str(uid), {})["active"] = True
        save_users(users)
        await bot.send_message(uid, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ")
        await send_welcome(uid)
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

    elif data == "myref":
        user_data = users.get(str(user_id), {})
        referrals = user_data.get("referrals", [])
        text = f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {get_referral_link(user_id)}\n\n"
        text += f"–í—Å–µ–≥–æ –ø–µ—Ä–µ—à–ª–æ –ø–æ —Å—Å—ã–ª–∫–µ: {len(referrals)}\n"
        text += "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏–µ –ø–æ–¥–ø–∏—Å–∫—É:\n"
        active_refs = [r for r in referrals if users.get(str(r), {}).get("active")]
        for r in active_refs:
            text += f"‚Ä¢ {r}\n"
        await call.message.answer(text)

    elif data == "mymessages":
        path = f"data/{user_id}_messages.json"
        if not os.path.exists(path):
            await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        with open(path, "r", encoding="utf-8") as f:
            msgs = json.load(f)
        for m in msgs[-10:]:
            await call.message.answer(str(m))  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

# -------------------- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è --------------------

@dp.message_handler(content_types=types.ContentType.ANY)
async def save_all(message: types.Message):
    user_id = message.from_user.id
    if user_active(user_id):
        msg = {
            "type": message.content_type,
            "text": message.text or "",
            "date": str(message.date)
        }
        save_message(user_id, msg)

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

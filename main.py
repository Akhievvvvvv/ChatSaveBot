import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import json
import os
from config import TOKEN, ADMIN_ID, TARIFFS, BANK_REQUISITES, FREE_DAYS, DATA_PATH

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists(DATA_PATH):
    os.makedirs(DATA_PATH)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
users_file = os.path.join(DATA_PATH, "users.json")
if os.path.exists(users_file):
    with open(users_file, "r") as f:
        users = json.load(f)
else:
    users = {}

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üéÅ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_week"),
        InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"),
        InlineKeyboardButton("ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
    )
    return kb

def back_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

def tariffs_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    for name, price in TARIFFS.items():
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        if name == "2_weeks":
            title = "2 –Ω–µ–¥–µ–ª–∏"
        elif name == "1_month":
            title = "1 –º–µ—Å—è—Ü"
        elif name == "2_months":
            title = "2 –º–µ—Å—è—Ü–∞"
        else:
            title = name
        kb.add(InlineKeyboardButton(f"{title} ‚Äî {price}‚ÇΩ", callback_data=f"tariff_{name}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = str(message.from_user.id)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–æ–≤—ã–π
    if user_id not in users:
        users[user_id] = {"active": False, "paid": False, "referrals": []}
        with open(users_file, "w") as f:
            json.dump(users, f, indent=4)

    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "–Ø –±–æ—Ç ChatSaver ü§ñ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        f"üíé –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {FREE_DAYS} –¥–Ω–µ–π\n"
        "üìå –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await message.answer(text, reply_markup=main_menu())

# --- Callback ---
@dp.callback_query_handler(lambda c: True)
async def callbacks(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    data = call.data

    if data == "back":
        await call.message.edit_text(
            f"‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, {call.from_user.full_name}:", reply_markup=main_menu()
        )
        return

    if data == "free_week":
        users[user_id]["active"] = True
        users[user_id]["free"] = True
        with open(users_file, "w") as f:
            json.dump(users, f, indent=4)

        await call.message.edit_text(
            "üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –±–æ—Ç–∞:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ Telegram Business\n"
            "2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º —á–∞—Ç–∞–º\n"
            "3. –í—Å–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è!\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            reply_markup=back_menu()
        )
        return

    if data.startswith("tariff_"):
        name = data.split("_")[1]
        price = TARIFFS[name]
        await call.message.edit_text(
            f"üí≥ –¢–∞—Ä–∏—Ñ: {name.replace('_', ' ')}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {BANK_REQUISITES}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–æ–æ–±—â–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=back_menu()
        )
        return

    if data == "tariffs":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_menu()
        )
        return

    if data == "referrals":
        ref_link = f"https://t.me/Chat_ls_save_bot?start={user_id}"
        count = len(users[user_id].get("referrals", []))
        await call.message.edit_text(
            f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count}\n"
            "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
            reply_markup=back_menu()
        )
        return

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
